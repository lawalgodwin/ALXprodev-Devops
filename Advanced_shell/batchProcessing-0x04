#!/usr/bin/env bash

# A script that fetches data for these Pokémon[ ] in parallel by leveraging background processes and process management tools.

# Ensure that the script handles background processes properly and waits for all processes to complete before moving to the next step.

BASE_URL="https://pokeapi.co/api/v2/pokemon"
pokemons=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define the maximum number of retries
MAX_RETRIES=3
# Function to make an API request and handle retries
fetch_pokemon_data() {
    local pokemon_name=$1
    local attempt=1

    # Loop to attempt fetching data up to MAX_RETRIES times
    while [ $attempt -le $MAX_RETRIES ]; do
        echo "Attempt $attempt to fetch data for $pokemon_name..."

        # Make the API request
        response=$(curl -s -w "%{http_code}" -o "$pokemon_name".json "$BASE_URL/$pokemon_name")
        http_code=$(tail -n1 <<< "$response")  # Extract the HTTP response code

        # Check for successful response (200 OK)
        if [ "$http_code" -eq 200 ]; then
            echo "Successfully fetched data for $pokemon_name."
            cat "$pokemon_name".json | jq .  # Output the Pokémon data (formatted with jq)
            return 0  # Success, exit the function
        else
            echo "Error fetching data for $pokemon_name. HTTP Status: $http_code"
            attempt=$((attempt + 1))
            if [ $attempt -le $MAX_RETRIES ]; then
                echo "Retrying in 3 seconds..."
                sleep 3  # Wait for 3 seconds before retrying
            fi
        fi
    done

    # If we've exhausted retries, log an error and skip to next Pokémon
    echo "Failed to fetch data for $pokemon_name after $MAX_RETRIES attempts. Skipping..."
    return 1
}

# Main script to iterate over the list of Pokémon

for pokemon in "${pokemons[@]}";
do
    fetch_pokemon_data "$pokemon" &
    if [[ $? -eq 1 ]]; then
        # if fetch failed, monve to the next pokemon to be fetched
        continue
    fi
done

# wait for all background processes to complete
wait

echo "All Pokémon data fetched successfully."